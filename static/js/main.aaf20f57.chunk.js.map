{"version":3,"sources":["Composants/Resultat/Resultat.js","Composants/IncrBtn/IncrBtn.js","Compteur/Compteur.js","App.js","Store/reducer.js","index.js"],"names":["Resultat","props","valeur","IncrBtn","className","onClick","clicked","txt","Compteur","state","compteur","calcul","action","setState","statePrec","this","ctr","incremente","decremente","Component","connect","dispatch","type","App","initialState","reducer","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"yUAEe,SAASA,EAASC,GAC7B,OACI,6BACKA,EAAMC,Q,MCDJ,SAASC,EAAQF,GAC5B,OACI,yBAAKG,UAAU,UAAUC,QAASJ,EAAMK,SACpCL,EAAMM,K,WCDZC,E,2MAEFC,MAAQ,CACJC,SAAW,G,EAGdC,OAAS,SAACC,GAEO,UAAXA,GACC,EAAKC,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,SAAUI,EAAUJ,SAAW,MAEhE,WAAXE,GACC,EAAKC,UAAU,SAAEC,GAAiB,MAAO,CAAEJ,SAAUI,EAAUJ,SAAW,O,wEAQ9E,OACI,yBAAKN,UAAU,QACf,yBAAKA,UAAU,cAGX,kBAACJ,EAAD,CAAUE,OAAQa,KAAKd,MAAMe,OAEjC,yBAAKZ,UAAU,WAGX,kBAAC,EAAD,CAASG,IAAI,aAAaD,QAASS,KAAKd,MAAMgB,aAE9C,kBAAC,EAAD,CAASV,IAAI,aAAaD,QAASS,KAAKd,MAAMiB,mB,GAhCvCC,aAsDRC,eAdS,SAAAX,GAEpB,MAAO,CACHO,IAAKP,EAAMC,aAIQ,SAAAW,GACvB,MAAO,CACHJ,WAAa,kBAAMI,EAAS,CAACC,KAAM,gBACnCJ,WAAa,kBAAMG,EAAS,CAACC,KAAM,mBAI5BF,CAA6CZ,GCjD7Ce,MARf,WACE,OACE,yBAAKnB,UAAU,OACX,kBAAC,EAAD,Q,OCNFoB,EAAe,CACjBd,SAAW,GAqBAe,EAlBC,WAAmC,IAAlChB,EAAiC,uDAAzBe,EAAcZ,EAAW,uCAG9C,MAAoB,eAAhBA,EAAOU,KACA,CACHZ,SAAWD,EAAMC,SAAW,GAIhB,eAAhBE,EAAOU,KACA,CACHZ,SAAWD,EAAMC,SAAW,GAI7BD,GCVLiB,EAAQC,YAAYF,GAE1BG,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAAoBI,SAASC,eAAe,W","file":"static/js/main.aaf20f57.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Resultat(props) {\n    return (\n        <div>\n            {props.valeur}\n        </div>\n    )\n}\n","import React from 'react'\nimport './IncrBtn.css';\n\n\nexport default function IncrBtn(props) {\n    return (\n        <div className=\"btnIncr\" onClick={props.clicked}>\n           {props.txt}\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport './Compteur.css';\nimport Resultat from '../Composants/Resultat/Resultat.js';\nimport IncrBtn from '../Composants/IncrBtn/IncrBtn.js';\nimport {connect} from 'react-redux';  // pour connecter le store aux composants\n\nclass Compteur extends Component {\n\n    state = {\n        compteur : 0\n    }\n\n     calcul = (action) => {\n\n        if(action === \"plus1\"){\n            this.setState( ( statePrec ) => { return { compteur: statePrec.compteur + 1 } } )\n        } \n        if(action === \"moins1\"){\n            this.setState( ( statePrec ) => { return { compteur: statePrec.compteur - 1 } } )\n        }\n    \n        \n    }\n    \n\n    render() {\n        return (\n            <div className=\"cont\">\n            <div className=\"blocConmpt\">\n                {/* <Resultat valeur={this.state.compteur} /> */}\n                {/* On remplace state.compteur par ctr et on rajoute props  pour que les chiffres proviennent directement du store*/}\n                <Resultat valeur={this.props.ctr} />\n            </div>\n            <div className=\"contBtn\">\n                {/* <IncrBtn txt=\"Incremente\" clicked={() => this.calcul(\"plus1\")} /> */}\n                {/* on remplace this.calcul(\"plus1\") par this.props.incremente */}\n                <IncrBtn txt=\"Incremente\" clicked={this.props.incremente} />\n                {/* <IncrBtn txt=\"Decremente\" clicked={() => this.calcul(\"moins1\")} /> */}\n                <IncrBtn txt=\"Decremente\" clicked={this.props.decremente} />\n            </div>\n        </div>\n        )\n    }\n}\n\n// premier paramettre de la methode connect\nconst mapStateToProps = state => {   // mapStateToProps: c'est le nom qu'on lui donne souvent mais on peut l'appeler comme on veut\n\n    return {\n        ctr: state.compteur   // ctr: pour compteur\n    }\n}\n// 2e paramettre de la methode connect\nconst mapDispatchToProps = dispatch => { \n    return {\n        incremente : () => dispatch({type: 'INCREMENTE'}),\n        decremente : () => dispatch({type: 'DECREMENTE'})\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Compteur);\n","import React from 'react';\nimport './App.css';\nimport Compteur from \"./Compteur/Compteur\";\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Compteur />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    compteur : 0\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    // les actions c'est ce que les composants vont lui envoyer pour dire fait ça ou ça au state\r\n    // on fait une condition pour gerer les actions \r\n    if (action.type === 'INCREMENTE') {\r\n        return {\r\n            compteur : state.compteur + 1\r\n        }\r\n    }\r\n\r\n    if (action.type === 'DECREMENTE') {\r\n        return {\r\n            compteur : state.compteur - 1\r\n        }\r\n    }\r\n    \r\n    return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux';\nimport reducer from './Store/reducer';\nimport {Provider} from 'react-redux';  // Provider c'est celui qui apporte\n\n// on cree un store qui va contenir tout le state\nconst store = createStore(reducer);   // c'est le reducer qui permet de modifier à chaque fois le state et envoyer le state modifié\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// Le provider va permettre d'injecter le state depuis notre store vers les composants\n   \n    \n\n"],"sourceRoot":""}